library(tidyr)
library(dplyr)
library(stringr)
library(raster)
library(sp)
library(data.table)

#DOWNLOAD GBIF BUTTERFLY AND HOSTPLANT OCCURENCE, KEEP ONLY RELEVANT COLUMNS AND BUTTERFLIES
columns_to_keep <- c("gbifID", "year", "month", "day", "decimalLatitude", "decimalLongitude", "kingdom", "phylum", "class", "order", "family", "genus", "taxonRank", "taxonKey", "species")
butterflies <- fread("path_to_file",
                    sep = "\t", select = c(columns_to_keep, NA, NA))
hostplants <- fread("path_to_file",
                    sep = "\t", select = c(columns_to_keep, NA, NA))
butterflies <- butterflies[!(butterflies$species %in% c('Vanessa cardui', 'Colias croceus')), ]

  # Get unique host plant names from the original dataframe
hostplant_names <- unique(unlist(diet[, -1]))

  # Create a new empty dataframe with host plants as columns and butterfly species as rows
diet_01 <- data.frame(matrix(0, nrow = nrow(diet), ncol = length(hostplant_names)))
colnames(diet_01) <- hostplant_names
rownames(diet_01) <- diet$species

  # Update the new dataframe based on interactions in the original dataframe
for (i in 1:nrow(diet)) {
  for (j in 2:ncol(diet)) {
    if (as.character(diet[i, j]) %in% colnames(diet_01)) {
      diet_01[i, as.character(diet[i, j])] <- 1
     }
   }
}
hostplant_species <- unique(hostplants$species)

# add the hostplants not included in the diet dataframe (part of a butterlfy's diet only throuh genus)
doubles <- names(diet_01)
new_column_names <- setdiff(hostplant_species, doubles)
diet_01 <- cbind(diet_01, matrix(0, nrow = nrow(diet_01), ncol = length(new_column_names), dimnames = list(NULL, new_column_names)))
diet_01.save <- diet_01

# remove genus columns to keep only species
column_names <- names(diet_01)
single_word_cols <- sapply(column_names, function(x) length(strsplit(x, " ")[[1]]) == 1)
diet_01 <- diet_01[, !single_word_cols]
is_genus <- names(diet_01)[sapply(names(diet_01), function(x) length(strsplit(x, " ")) == 1)]
for (genus in genus_hostplants) {
  diet_01[, str_detect(colnames(diet_01), paste0("^", genus))] <- 1
}

#DOWNLOADING PRECIPITATION DATA FOR ALL RESOLUTIONS - code can be applied to download past and future data 
# Downloading Past Precipitation data to calculate current levels
# Prec 2.5min
# crop to UK
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# List all GeoTIFF files in the working directory
files <- list.files(pattern = "\\.tif$", full.names = TRUE)

# Filter the files that contain 'prec' in their names
prec_files <- files[grepl("prec", files)]

# Define the output folder where you want to save the files
output_folder <- ""path_to_folder"

# Loop through each file in prec_files_list
for (file in prec_files) {
  # Read the raster file
  global_raster <- raster(file)
  
  # Define the extent for the UK (xmin, xmax, ymin, ymax)
  uk_extent <- c(-9, 3, 49, 61.2)
  
  # Crop the global raster to the UK extent
  uk_raster <- crop(global_raster, extent(uk_extent))
  
  # Define a new filename for the cropped raster
  new_filename <- paste0(output_folder, "cropped_", basename(file), '.tif')
  
  # Export the cropped raster to a new file in the specified folder
  writeRaster(uk_raster, filename = new_filename, format = "GTiff", overwrite = TRUE)
}

# Transform rasters into one spatial dataframe
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# Filter the files that contain 'prec' in their names
cropped_prec_files_list <- list.files(pattern = "CroppedWCPastPreccropped", full.names = TRUE)

# Load all prec GeoTIFF files as a list of raster objects
cropped_prec_files_list <- lapply(cropped_prec_files_list, raster)

# Combine the prec raster objects into a single raster stack
prec_raster_stack <- stack(cropped_prec_files_list)

# Convert the prec raster stack into a spatial data frame
prec_spatial_df <- as.data.frame(prec_raster_stack, xy = TRUE)

# rename headers prec
# Define a pattern to exclude specific columns like 'x' and 'y'
pattern_to_exclude <- "^x$|^y$"

# Extract only the "year"."month_in_numbers" part from the header names for non-excluded columns
new_headers <- gsub(paste0(".*(", pattern_to_exclude, "|(\\d{4})\\.\\d{2})\\.tif$"), "\\1", colnames(prec_spatial_df), perl = TRUE)
new_headers <- gsub("\\.", "_", new_headers)

# Rename the columns in the dataframe with the simplified header names
colnames(prec_spatial_df) <- new_headers

# Prec 5min
# crop to UK
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# List all GeoTIFF files in the working directory
files <- list.files(pattern = "\\.tif$", full.names = TRUE)

# Filter the files that contain 'prec' in their names
prec_files <- files[grepl("prec", files)]

# Define the output folder where you want to save the files
output_folder <- "path_to_folder"

# Loop through each file in prec_files_list
for (file in prec_files) {
  # Read the raster file
  global_raster <- raster(file)
  
  # Define the extent for the UK (xmin, xmax, ymin, ymax)
  uk_extent <- c(-9, 3, 49, 61.2)
  
  # Crop the global raster to the UK extent
  uk_raster <- crop(global_raster, extent(uk_extent))
  
  # Define a new filename for the cropped raster
  new_filename <- paste0(output_folder, "cropped_", basename(file), '.tif')
  
  # Export the cropped raster to a new file in the specified folder
  writeRaster(uk_raster, filename = new_filename, format = "GTiff", overwrite = TRUE)
}

# Transform rasters into one spatial dataframe
# Set the directory where your GeoTIFF files are stored
setwd("/Users/gaellemairlot/Library/CloudStorage/OneDrive-UniversityofEdinburgh/Dissertation/Data/CroppedWCPastPrec_5min")

# Filter the files that contain 'prec' in their names
cropped_prec_files_list <- list.files(pattern = "CroppedWCPastPrec_5min", full.names = TRUE)

# Load all prec GeoTIFF files as a list of raster objects
cropped_prec_files_list <- lapply(cropped_prec_files_list, raster)

# Combine the prec raster objects into a single raster stack
prec_5min_raster_stack <- stack(cropped_prec_files_list)

# Convert the prec raster stack into a spatial data frame
prec_5min_spatial_df <- as.data.frame(prec_5min_raster_stack, xy = TRUE)

# rename headers prec
# Define a pattern to exclude specific columns like 'x' and 'y'
pattern_to_exclude <- "^x$|^y$"

# Extract only the "year"."month_in_numbers" part from the header names for non-excluded columns
new_headers <- gsub(paste0(".*(", pattern_to_exclude, "|(\\d{4})\\.\\d{2})\\.tif$"), "\\1", colnames(prec_spatial_df), perl = TRUE)
new_headers <- gsub("\\.", "_", new_headers)

# Rename the columns in the dataframe with the simplified header names
colnames(prec_5min_spatial_df) <- new_headers

# Prec 10min
# crop to UK
# Set the directory where your GeoTIFF files are stored
setwd("/Users/gaellemairlot/Library/CloudStorage/OneDrive-UniversityofEdinburgh/Dissertation/Data/WCPastPrec_10min")

# List all GeoTIFF files in the working directory
files <- list.files(pattern = "\\.tif$", full.names = TRUE)

# Filter the files that contain 'prec' in their names
prec_files <- files[grepl("prec", files)]

# Define the output folder where you want to save the files
output_folder <- "/Users/gaellemairlot/Library/CloudStorage/OneDrive-UniversityofEdinburgh/Dissertation/Data/CroppedWCPastPrec_10min"

# Loop through each file in prec_files_list
for (file in prec_files) {
  # Read the raster file
  global_raster <- raster(file)
  
  # Define the extent for the UK (xmin, xmax, ymin, ymax)
  uk_extent <- c(-9, 3, 49, 61.2)
  
  # Crop the global raster to the UK extent
  uk_raster <- crop(global_raster, extent(uk_extent))
  
  # Define a new filename for the cropped raster
  new_filename <- paste0(output_folder, "cropped_", basename(file), '.tif')
  
  # Export the cropped raster to a new file in the specified folder
  writeRaster(uk_raster, filename = new_filename, format = "GTiff", overwrite = TRUE)
}

# Transform rasters into one spatial dataframe
# Set the directory where your GeoTIFF files are stored
setwd("/Users/gaellemairlot/Library/CloudStorage/OneDrive-UniversityofEdinburgh/Dissertation/Data/CroppedWCPastPrec_10min")

# Filter the files that contain 'prec' in their names
cropped_prec_files_list <- list.files(pattern = "CroppedWCPastPrec_10min", full.names = TRUE)

# Load all prec GeoTIFF files as a list of raster objects
cropped_prec_files_list <- lapply(cropped_prec_files_list, raster)

# Combine the prec raster objects into a single raster stack
prec_10min_raster_stack <- stack(cropped_prec_files_list)

# Convert the prec raster stack into a spatial data frame
prec_10min_spatial_df <- as.data.frame(prec_10min_raster_stack, xy = TRUE)

# rename headers prec
# Define a pattern to exclude specific columns like 'x' and 'y'
pattern_to_exclude <- "^x$|^y$"

# Extract only the "year"."month_in_numbers" part from the header names for non-excluded columns
new_headers <- gsub(paste0(".*(", pattern_to_exclude, "|(\\d{4})\\.\\d{2})\\.tif$"), "\\1", colnames(prec_10min_spatial_df), perl = TRUE)
new_headers <- gsub("\\.", "_", new_headers)

# Rename the columns in the dataframe with the simplified header names
colnames(prec_10min_spatial_df) <- new_headers


#DOWNLOADING TEMPERATURE DATA FOR ALL RESOLUTIONS - code can be applied to download past and future data 
# Tmin 2.5 min
# crop to UK
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# List all GeoTIFF files in the working directory
files <- list.files(pattern = "\\.tif$", full.names = TRUE)

# Filter the files that contain 'tmin' in their names
tmin_files <- files[grepl("tmin", files)]

# Define the output folder where you want to save the files
output_folder <- "path_to_folder"


# Loop through each file in prec_files_list
for (file in tmin_files) {
  # Read the raster file
  global_raster <- raster(file)
  
  # Define the extent for the UK (xmin, xmax, ymin, ymax)
  uk_extent <- c(-9, 3, 49, 61.2)
  
  # Crop the global raster to the UK extent
  uk_raster <- crop(global_raster, extent(uk_extent))
  
  # Define a new filename for the cropped raster
  new_filename <- paste0(output_folder, "cropped_", basename(file), '.tif')
  
  # Export the cropped raster to a new file in the specified folder
  writeRaster(uk_raster, filename = new_filename, format = "GTiff", overwrite = TRUE)
}

# Transform rasters into one spatial dataframe
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# Filter the files that contain 'CroppedWCPastTmincropped' in their names
cropped_tmin_files_list <- list.files(pattern = "CroppedWCPastTmincropped", full.names = TRUE)

# Load all tmin GeoTIFF files as a list of raster objects
cropped_tmin_files_list <- lapply(cropped_tmin_files_list, raster)

# Combine the tmin raster objects into a single raster stack
tmin_raster_stack <- stack(cropped_tmin_files_list)

# Convert the tmin raster stack into a spatial data frame
tmin_spatial_2_5_df <- as.data.frame(tmin_raster_stack, xy = TRUE)

# rename headers tmin
# Define a pattern to exclude specific columns like 'x' and 'y'
pattern_to_exclude <- "^x$|^y$"

# Extract only the "year"."month_in_numbers" part from the header names for non-excluded columns
new_headers <- gsub(paste0(".*(", pattern_to_exclude, "|(\\d{4})\\.\\d{2})\\.tif$"), "\\1", colnames(tmin_spatial_2_5_df), perl = TRUE)
new_headers <- gsub("\\.", "_", new_headers)

# Rename the columns in the dataframe with the simplified header names
colnames(tmin_spatial_2_5_df) <- new_headers


# Tmax 2.5 min
# crop to UK
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# List all GeoTIFF files in the working directory
files <- list.files(pattern = "\\.tif$", full.names = TRUE)

# Filter the files that contain 'tmax' in their names
tmax_files <- files[grepl("tmax", files)]

# Define the output folder where you want to save the files
output_folder <- "path_to_folder"


# Loop through each file in tmax_files_list
for (file in tmax_files) {
  # Read the raster file
  global_raster <- raster(file)
  
  # Define the extent for the UK (xmin, xmax, ymin, ymax)
  uk_extent <- c(-9, 3, 49, 61.2)
  
  # Crop the global raster to the UK extent
  uk_raster <- crop(global_raster, extent(uk_extent))
  
  # Define a new filename for the cropped raster
  new_filename <- paste0(output_folder, "cropped_", basename(file), '.tif')
  
  # Export the cropped raster to a new file in the specified folder
  writeRaster(uk_raster, filename = new_filename, format = "GTiff", overwrite = TRUE)
}

# Transform rasters into one spatial dataframe
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# Filter the files that contain 'CroppedWCPastTmaxcropped' in their names
cropped_tmax_files_list <- list.files(pattern = "CroppedWCPastTmaxcropped", full.names = TRUE)

# Load all tmax GeoTIFF files as a list of raster objects
cropped_tmax_files_list <- lapply(cropped_tmax_files_list, raster)

# Combine the tmax raster objects into a single raster stack
tmax_raster_stack <- stack(cropped_tmax_files_list)

# Convert the prec raster stack into a spatial data frame
tmax_spatial_2_5_df <- as.data.frame(tmax_raster_stack, xy = TRUE)

# rename headers tmax
# Define a pattern to exclude specific columns like 'x' and 'y'
pattern_to_exclude <- "^x$|^y$"

# Extract only the "year"."month_in_numbers" part from the header names for non-excluded columns
new_headers <- gsub(paste0(".*(", pattern_to_exclude, "|(\\d{4})\\.\\d{2})\\.tif$"), "\\1", colnames(tmax_spatial_2_5_df), perl = TRUE)
new_headers <- gsub("\\.", "_", new_headers)

# Rename the columns in the dataframe with the simplified header names
colnames(tmax_spatial_2_5_df) <- new_headers


# Tmin 5 min
# crop to UK
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# List all GeoTIFF files in the working directory
files <- list.files(pattern = "\\.tif$", full.names = TRUE)

# Filter the files that contain 'tmin' in their names
tmin_files <- files[grepl("tmin", files)]

# Define the output folder where you want to save the files
output_folder <- "path_to_folder"

# Loop through each file in tmin_files_list
for (file in tmin_files) {
  # Read the raster file
  global_raster <- raster(file)
  
  # Define the extent for the UK (xmin, xmax, ymin, ymax)
  uk_extent <- c(-9, 3, 49, 61.2)
  
  # Crop the global raster to the UK extent
  uk_raster <- crop(global_raster, extent(uk_extent))
  
  # Define a new filename for the cropped raster
  new_filename <- paste0(output_folder, "cropped_", basename(file), '.tif')
  
  # Export the cropped raster to a new file in the specified folder
  writeRaster(uk_raster, filename = new_filename, format = "GTiff", overwrite = TRUE)
}

# Transform rasters into one spatial dataframe
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# Filter the files that contain 'CroppedWCPastTmincropped' in their names
cropped_tmin_files_list <- list.files(pattern = "CroppedWCPastTmin_5mincropped", full.names = TRUE)

# Load all tmin GeoTIFF files as a list of raster objects
cropped_tmin_files_list <- lapply(cropped_tmin_files_list, raster)

# Combine the tmin raster objects into a single raster stack
tmin_raster_stack <- stack(cropped_tmin_files_list)

# Convert the tmin raster stack into a spatial data frame
tmin_5min_spatial_df <- as.data.frame(tmin_raster_stack, xy = TRUE)

# rename headers tmin
# Define a pattern to exclude specific columns like 'x' and 'y'
pattern_to_exclude <- "^x$|^y$"

# Extract only the "year"."month_in_numbers" part from the header names for non-excluded columns
new_headers <- gsub(paste0(".*(", pattern_to_exclude, "|(\\d{4})\\.\\d{2})\\.tif$"), "\\1", colnames(tmin_5min_spatial_df), perl = TRUE)
new_headers <- gsub("\\.", "_", new_headers)

# Rename the columns in the dataframe with the simplified header names
colnames(tmin_5min_spatial_df) <- new_headers


# Tmax 5 min
# crop to UK
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# List all GeoTIFF files in the working directory
files <- list.files(pattern = "\\.tif$", full.names = TRUE)

# Filter the files that contain 'tmax' in their names
tmax_files <- files[grepl("tmax", files)]

# Define the output folder where you want to save the files
output_folder <- "path_to_folder"


# Loop through each file in tmax_files_list
for (file in tmax_files) {
  # Read the raster file
  global_raster <- raster(file)
  
  # Define the extent for the UK (xmin, xmax, ymin, ymax)
  uk_extent <- c(-9, 3, 49, 61.2)
  
  # Crop the global raster to the UK extent
  uk_raster <- crop(global_raster, extent(uk_extent))
  
  # Define a new filename for the cropped raster
  new_filename <- paste0(output_folder, "cropped_", basename(file), '.tif')
  
  # Export the cropped raster to a new file in the specified folder
  writeRaster(uk_raster, filename = new_filename, format = "GTiff", overwrite = TRUE)
}

# Transform rasters into one spatial dataframe
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# Filter the files that contain 'CroppedWCPastTmaxcropped' in their names
cropped_tmax_files_list <- list.files(pattern = "CroppedWCPastTmax_5mincropped", full.names = TRUE)

# Load all tmax GeoTIFF files as a list of raster objects
cropped_tmax_files_list <- lapply(cropped_tmax_files_list, raster)

# Combine the tmax raster objects into a single raster stack
tmax_raster_stack <- stack(cropped_tmax_files_list)

# Convert the prec raster stack into a spatial data frame
tmax_5min_spatial_df <- as.data.frame(tmax_raster_stack, xy = TRUE)

# rename headers tmax
# Define a pattern to exclude specific columns like 'x' and 'y'
pattern_to_exclude <- "^x$|^y$"

# Extract only the "year"."month_in_numbers" part from the header names for non-excluded columns
new_headers <- gsub(paste0(".*(", pattern_to_exclude, "|(\\d{4})\\.\\d{2})\\.tif$"), "\\1", colnames(tmax_5min_spatial_df), perl = TRUE)
new_headers <- gsub("\\.", "_", new_headers)

# Rename the columns in the dataframe with the simplified header names
colnames(tmax_5min_spatial_df) <- new_headers

# Tmin 10 min
# crop to UK
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# List all GeoTIFF files in the working directory
files <- list.files(pattern = "\\.tif$", full.names = TRUE)

# Filter the files that contain 'tmin' in their names
tmin_files <- files[grepl("tmin", files)]

# Define the output folder where you want to save the files
output_folder <- "path_to_folder"

# Loop through each file in tmin_files_list
for (file in tmin_files) {
  # Read the raster file
  global_raster <- raster(file)
  
  # Define the extent for the UK (xmin, xmax, ymin, ymax)
  uk_extent <- c(-9, 3, 49, 61.2)
  
  # Crop the global raster to the UK extent
  uk_raster <- crop(global_raster, extent(uk_extent))
  
  # Define a new filename for the cropped raster
  new_filename <- paste0(output_folder, "cropped_", basename(file), '.tif')
  
  # Export the cropped raster to a new file in the specified folder
  writeRaster(uk_raster, filename = new_filename, format = "GTiff", overwrite = TRUE)
}

# Transform rasters into one spatial dataframe
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# Filter the files that contain 'CroppedWCPastTmincropped' in their names
cropped_tmin_files_list <- list.files(pattern = "CroppedWCPastTmin_10mincropped", full.names = TRUE)

# Load all tmin GeoTIFF files as a list of raster objects
cropped_tmin_files_list <- lapply(cropped_tmin_files_list, raster)

# Combine the tmin raster objects into a single raster stack
tmin_raster_stack <- stack(cropped_tmin_files_list)

# Convert the tmin raster stack into a spatial data frame
tmin_10min_spatial_df <- as.data.frame(tmin_raster_stack, xy = TRUE)

# rename headers tmin
# Define a pattern to exclude specific columns like 'x' and 'y'
pattern_to_exclude <- "^x$|^y$"

# Extract only the "year"."month_in_numbers" part from the header names for non-excluded columns
new_headers <- gsub(paste0(".*(", pattern_to_exclude, "|(\\d{4})\\.\\d{2})\\.tif$"), "\\1", colnames(tmin_10min_spatial_df), perl = TRUE)
new_headers <- gsub("\\.", "_", new_headers)

# Rename the columns in the dataframe with the simplified header names
colnames(tmin_10min_spatial_df) <- new_headers


# Tmax 10 min
# crop to UK
# Set the directory where your GeoTIFF files are stored
setwd("/Users/gaellemairlot/Library/CloudStorage/OneDrive-UniversityofEdinburgh/Dissertation/Data/WCPastTemp_10min")

# List all GeoTIFF files in the working directory
files <- list.files(pattern = "\\.tif$", full.names = TRUE)

# Filter the files that contain 'tmax' in their names
tmax_files <- files[grepl("tmax", files)]

# Define the output folder where you want to save the files
output_folder <- "path_to_folder"


# Loop through each file in tmax_files_list
for (file in tmax_files) {
  # Read the raster file
  global_raster <- raster(file)
  
  # Define the extent for the UK (xmin, xmax, ymin, ymax)
  uk_extent <- c(-9, 3, 49, 61.2)
  
  # Crop the global raster to the UK extent
  uk_raster <- crop(global_raster, extent(uk_extent))
  
  # Define a new filename for the cropped raster
  new_filename <- paste0(output_folder, "cropped_", basename(file), '.tif')
  
  # Export the cropped raster to a new file in the specified folder
  writeRaster(uk_raster, filename = new_filename, format = "GTiff", overwrite = TRUE)
}

# Transform rasters into one spatial dataframe
# Set the directory where your GeoTIFF files are stored
setwd("path_to_directory")

# Filter the files that contain 'CroppedWCPastTmaxcropped' in their names
cropped_tmax_files_list <- list.files(pattern = "CroppedWCPastTmax_10mincropped", full.names = TRUE)

# Load all tmax GeoTIFF files as a list of raster objects
cropped_tmax_files_list <- lapply(cropped_tmax_files_list, raster)

# Combine the tmax raster objects into a single raster stack
tmax_raster_stack <- stack(cropped_tmax_files_list)

# Convert the prec raster stack into a spatial data frame
tmax_10min_spatial_df <- as.data.frame(tmax_raster_stack, xy = TRUE)

# rename headers tmax
# Define a pattern to exclude specific columns like 'x' and 'y'
pattern_to_exclude <- "^x$|^y$"

# Extract only the "year"."month_in_numbers" part from the header names for non-excluded columns
new_headers <- gsub(paste0(".*(", pattern_to_exclude, "|(\\d{4})\\.\\d{2})\\.tif$"), "\\1", colnames(tmax_10min_spatial_df), perl = TRUE)
new_headers <- gsub("\\.", "_", new_headers)

# Rename the columns in the dataframe with the simplified header names
colnames(tmax_10min_spatial_df) <- new_headers

# elev-site 2.5min
# elevation site allocation
setDT(elevation_df_2_5)
setDT(cells_2_5)

# Create prec_sites trying to get rid of duplicates
elev_sites_2_5 <- cells_2_5[elevation_df_2_5, on = .(lat_min <= y, lat_max >= y,
                                            lon_min <= x, lon_max >= x),
                    .(elevation = i.elevation, y, x, cell_ID = x.cell_ID), mult = "first"]

# elev-site 5min
# elevation site allocation
setDT(elevation_df_5)
setDT(cells_5)

# Create prec_sites trying to get rid of duplicates
elev_sites_5 <- cells_5[elevation_df_5, on = .(lat_min <= y, lat_max >= y,
                                         lon_min <= x, lon_max >= x),
                    .(elevation = i.elevation, y, x, cell_ID = x.cell_ID), mult = "first"]

# elev-site 10min
# elevation site allocation
setDT(elevation_df_10)
setDT(cells_10)

# Create prec_sites trying to get rid of duplicates
elev_sites_10 <- cells_10[elevation_df_10, on = .(lat_min <= y, lat_max >= y,
                                           lon_min <= x, lon_max >= x),
                      .(elevation = i.elevation, y, x, cell_ID = x.cell_ID), mult = "first"]
