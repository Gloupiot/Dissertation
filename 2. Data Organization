library(raster)
library(dplyr)
library(data.table)
library(tidyr)


#CREATE SITES
# create sites of ~5 km2
res(tmin_raster_stack_2_5) #res = 0.04166667
cells_2_5 <- data.frame(x = prec_spatial_df$x, y = prec_spatial_df$y) #x and y = center of the cell
cells_2_5$lat_min <- cells_2_5$y - 0.04166667/2
cells_2_5$lat_max <- cells_2_5$y + 0.04166667/2
cells_2_5$lon_min <- cells_2_5$x - 0.04166667/2
cells_2_5$lon_max <- cells_2_5$x + 0.04166667/2
cells_2_5$cell_ID <- seq_len(nrow(cells_2_5))

# create sites of ~9 km2
res(tmin_raster_stack_5) #res = 0.08333333
cells_5 <- data.frame(x = prec_5min_spatial_df$x, y = prec_5min_spatial_df$y) #x and y = center of the cell
cells_5$lat_min <- cells_5$y - 0.08333333/2
cells_5$lat_max <- cells_5$y + 0.08333333/2
cells_5$lon_min <- cells_5$x - 0.08333333/2
cells_5$lon_max <- cells_5$x + 0.08333333/2
cells_5$cell_ID <- seq_len(nrow(cells_5))

# create sites of ~19 km2
res(tmin_raster_stack_10) #res = 0.1666667
cells_10 <- data.frame(x = prec_10min_spatial_df$x, y = prec_10min_spatial_df$y) #x and y = center of the cell
cells_10$lat_min <- cells_10$y - 0.1666667/2
cells_10$lat_max <- cells_10$y + 0.1666667/2
cells_10$lon_min <- cells_10$x - 0.1666667/2
cells_10$lon_max <- cells_10$x + 0.1666667/2
cells_10$cell_ID <- seq_len(nrow(cells_10))

#ASSIGN BUTTERFLY OCCURENCES TO SITES
# Check for missing values
missing_values <- is.na(butterflies$decimalLatitude) | is.na(butterflies$decimalLongitude)

# Remove rows with missing values
butterflies_clean <- butterflies[!missing_values, ]
butterflies <- butterflies_clean

# bf-sites 2.5min
# Convert dataframes to data.tables
setDT(butterflies)
setDT(cells_2_5)

# Create bf_sites_raw and assigning each bf observation to 1 cell
bf_sites_raw <- cells_2_5[butterflies, on = .(lat_min <= decimalLatitude, lat_max >= decimalLatitude,
                                          lon_min <= decimalLongitude, lon_max >= decimalLongitude),
                      .(species = i.species, decimalLatitude, decimalLongitude, cell_ID = x.cell_ID), mult = "first"]


# keep 1 individual per species per site
bf_sites_unique <- bf_sites_raw %>%
  distinct(species, cell_ID, .keep_all = TRUE)

# dataframe that shows what species are present at every site and resulting richness
# Create an empty dataframe with cell IDs and butterfly species
sites_with_bf <- data.frame(cell_ID = unique(bf_sites_unique$cell_ID))
num_rows_sites_with_bf <- nrow(sites_with_bf)
bf_species <- Butterflyspecies$Bspecies
bf_rich_sites_2_5 <- data.frame(matrix(ncol = length(bf_species), nrow = num_rows_sites_with_bf))
colnames(bf_rich_sites_2_5) <- bf_species
bf_rich_sites_2_5$cell_ID <- sites_with_bf$cell_ID

# Add interaction to the dataframe
library(data.table)
setDT(bf_rich_sites_2_5)
setDT(bf_sites_unique)

# Loop through each row in bf_sites_unique and update bf_rich_sites_2_5
for (i in 1:nrow(bf_sites_unique)) {
  cell_id <- bf_sites_unique[i, cell_ID]
  species <- bf_sites_unique[i, species]
  
  # Check if the species column exists in bf_rich_sites
  if (species %in% colnames(bf_rich_sites_2_5)) {
    # Update the corresponding cell in bf_rich_sites with 1
    bf_rich_sites_2_5[cell_ID == cell_id, (species) := 1]
  }
}

# Fill missing values with 0
bf_rich_sites_2_5[is.na(bf_rich_sites_2_5)] <- 0

# Add richness count per cell_ID
bf_rich_sites_2_5$richness <- apply(bf_rich_sites_2_5, 1, function(x) {sum(x == 1)})

# bf-sites 5min
# Convert dataframes to data.tables
setDT(butterflies)
setDT(cells_5)

# Create bf_sites_raw and assigning each bf observation to 1 cell
bf_sites_raw <- cells_5[butterflies, on = .(lat_min <= decimalLatitude, lat_max >= decimalLatitude,
                                              lon_min <= decimalLongitude, lon_max >= decimalLongitude),
                          .(species = i.species, decimalLatitude, decimalLongitude, cell_ID = x.cell_ID), mult = "first"]


# keep 1 individual per species per site
bf_sites_unique <- bf_sites_raw %>%
  distinct(species, cell_ID, .keep_all = TRUE)

# dataframe that shows what species are present at every site and resulting richness
# Create an empty dataframe with cell IDs and butterfly species
sites_with_bf <- data.frame(cell_ID = unique(bf_sites_unique$cell_ID))
num_rows_sites_with_bf <- nrow(sites_with_bf)
bf_species <- Butterflyspecies$Bspecies
bf_rich_sites_5 <- data.frame(matrix(ncol = length(bf_species), nrow = num_rows_sites_with_bf))
colnames(bf_rich_sites_5) <- bf_species
bf_rich_sites_5$cell_ID <- sites_with_bf$cell_ID

# Add interaction to the dataframe
library(data.table)
setDT(bf_rich_sites_5)
setDT(bf_sites_unique)

# Loop through each row in bf_sites_unique and update bf_rich_sites
for (i in 1:nrow(bf_sites_unique)) {
  cell_id <- bf_sites_unique[i, cell_ID]
  species <- bf_sites_unique[i, species]
  
  # Check if the species column exists in bf_rich_sites
  if (species %in% colnames(bf_rich_sites_5)) {
    # Update the corresponding cell in bf_rich_sites with 1
    bf_rich_sites_5[cell_ID == cell_id, (species) := 1]
  }
}

# Fill missing values with 0
bf_rich_sites_5[is.na(bf_rich_sites_5)] <- 0

# Add richness count per cell_ID
bf_rich_sites_5$richness <- apply(bf_rich_sites_5, 1, function(x) {sum(x == 1)})

# bf-sites 10min
# Convert dataframes to data.tables
setDT(butterflies)
setDT(cells_10)

# Create bf_sites_raw and assigning each bf observation to 1 cell
bf_sites_raw <- cells_10[butterflies, on = .(lat_min <= decimalLatitude, lat_max >= decimalLatitude,
                                            lon_min <= decimalLongitude, lon_max >= decimalLongitude),
                        .(species = i.species, decimalLatitude, decimalLongitude, cell_ID = x.cell_ID), mult = "first"]


# keep 1 individual per species per site
bf_sites_unique <- bf_sites_raw %>%
  distinct(species, cell_ID, .keep_all = TRUE)

# dataframe that shows what species are present at every site and resulting richness
# Create an empty dataframe with cell IDs and butterfly species
sites_with_bf <- data.frame(cell_ID = unique(bf_sites_unique$cell_ID))
num_rows_sites_with_bf <- nrow(sites_with_bf)
bf_species <- Butterflyspecies$Bspecies
bf_rich_sites_10 <- data.frame(matrix(ncol = length(bf_species), nrow = num_rows_sites_with_bf))
colnames(bf_rich_sites_10) <- bf_species
bf_rich_sites_10$cell_ID <- sites_with_bf$cell_ID

# Add interaction to the dataframe
library(data.table)
setDT(bf_rich_sites_10)
setDT(bf_sites_unique)

# Loop through each row in bf_sites_unique and update bf_rich_sites
for (i in 1:nrow(bf_sites_unique)) {
  cell_id <- bf_sites_unique[i, cell_ID]
  species <- bf_sites_unique[i, species]
  
  # Check if the species column exists in bf_rich_sites
  if (species %in% colnames(bf_rich_sites_10)) {
    # Update the corresponding cell in bf_rich_sites with 1
    bf_rich_sites_10[cell_ID == cell_id, (species) := 1]
  }
}

# Fill missing values with 0
bf_rich_sites_10[is.na(bf_rich_sites_10)] <- 0

# Add richness count per cell_ID
bf_rich_sites_10$richness <- apply(bf_rich_sites_10, 1, function(x) {sum(x == 1)})


#ASSIGN BUTTERFLY OCCURENCES TO SITES
# butterfly species and site allocation
# Check for missing values
missing_values <- is.na(hostplants$decimalLatitude) | is.na(hostplants$decimalLongitude)

# Remove rows with missing values
hostplants_clean <- hostplants[!missing_values, ]
hostplants <- hostplants_clean 

# Convert dataframes to data.tables
setDT(hostplants)
setDT(cells)

# Create hp_sites_raw trying to get rid of duplicates
hp_sites_raw <- cells[hostplants, on = .(lat_min <= decimalLatitude, lat_max >= decimalLatitude,
                                          lon_min <= decimalLongitude, lon_max >= decimalLongitude),
                      .(species = i.species, decimalLatitude, decimalLongitude, cell_ID = x.ID), mult = "first"]

# create hp_sites, interactions 1/0 between hp and sites
# Create an empty dataframe with cell IDs and hostplant species
hp_sites <- data.frame(cell_ID = unique(hp_sites_raw$cell_ID))
num_rows_sites_with_hp <- nrow(hp_sites_raw)
hostplant_names <- names(diet_01)
hp_sites <- data.frame(matrix(ncol = length(hostplant_names), nrow = num_rows_sites_with_hp))
colnames(hp_sites) <- hostplant_names
hp_sites$cell_ID <- hp_sites_raw$cell_ID

# Add interaction to the dataframe
library(data.table)
setDT(hp_sites)
setDT(hp_sites_raw)

# Loop through each row in bf_sites_unique and update bf_rich_sites
for (i in 1:nrow(hp_sites_raw)) {
  cell_id <- hp_sites_raw[i, cell_ID]
  species <- hp_sites_raw[i, species]
  
  # Check if the species column exists in bf_rich_sites
  if (species %in% colnames(hp_sites)) {
    # Update the corresponding cell in bf_rich_sites with 1
    hp_sites[cell_ID == cell_id, (species) := 1]
  }
}


# Fill missing values with 0
hp_sites[is.na(hp_sites)] <- 0


#CREATE SITE-BY-CO-OCCURENCE MATRIX
# transform bf_sites to a simple form
bf_sites_10_simple <- data.frame(butterfly = character(), cell_ID = character())

for (i in 1:(ncol(bf_sites_10) - 1)) {
  # Get the column name (butterfly species)
  butterfly_name <- names(bf_sites_10)[i]
  
  # Find the rows where the value is 1 in the current column
  rows_with_1 <- which(bf_sites_10[[butterfly_name]] == 1)
  
  # Add the butterfly name and corresponding cell_ID to the new dataframe
  bf_sites_10_simple <- rbind(bf_sites_10_simple, data.frame(
    butterfly = rep(butterfly_name, length(rows_with_1)),
    cell_ID = bf_sites_10$cell_ID[rows_with_1]
  ))
}

# transform hp_sites to a simple form
hp_sites_10_simple <- hp_sites_10[, -(2:3)]

# Convert dataframes to data.tables
bf_dt <- data.table(bf_sites_10_simple)
hp_dt <- data.table(hp_sites_10_simple)

hp_dt1 <- hp_dt
hp_dt <- hp_dt[!duplicated(hp_dt),]
hp_dt <- hp_dt[-which(hp_dt$species==""),]
sites_cooc_10 <- data.frame(cbind(bf_dt),matrix(0,nrow(bf_dt),length(unique(hp_dt$species))))
names(sites_cooc_10)[3:ncol(sites_cooc_10)] <- sort(unique(hp_dt$species))
for(i in unique(sites_cooc_10$cell_ID)){
  toto <- hp_dt$species[which(hp_dt$cell_ID==i)]
  sites_cooc_10[which(sites_cooc_10$cell_ID==i),which(names(sites_cooc_10) %in% toto)] <- 1
}

column_names <- names(sites_cooc_10[3:ncol(sites_cooc_10)])
single_word_cols <- c(FALSE, FALSE, sapply(column_names, function(x) length(strsplit(x, " ")[[1]]) == 1))
sites_cooc_10 <- sites_cooc_10[, !single_word_cols]

diet_01.all <- diet_01
diet_01 <- diet_01[,which((names(diet_01) %in% names(sites_cooc_10)))]

# make the interaction dataframe
toto <- sites_cooc_10[,3:ncol(sites_cooc_10)] ##select only the 0/1 data
toto <- toto %>% relocate(order(colnames(toto))) ## reorder columns alphabetically
sites_cooc_10[,3:ncol(sites_cooc_10)] <- toto ## replace the original data by the reordered data
colnames(sites_cooc_10)[3:ncol(sites_cooc_10)] <- colnames(toto) ##update column names

sites_cooc_10.save <- sites_cooc_10 ## data frame with 1's if the plant is present - does not account for diet yet

diet_01 <- diet_01 %>% relocate(order(colnames(diet_01))) ##reorder columns alphabetically
colnames(diet_01) <- sort(colnames(diet_01)) ##update column names
for(i in sort(unique(sites_cooc_10$butterflies))){ ##for each butterfly
  #i <- sort(unique(sites_cooc_10$butterflies))[1] ##if you need to debug
  tata <- which(sites_cooc_10$butterflies==i) ##find the rows for this butterfly
  toto <- sites_cooc_10[tata,3:ncol(sites_cooc_10)] ####select the data for this butterfly and remove first 2 columns
  
  titi <- which(row.names(diet_01)==i) ##find the diet for this butterfly
  if(length(titi)==0)
    print(paste("name",i,"not found"))
  if(length(titi)>1)
    print(paste("name",i,"found multiple times"))
  diet_01.but <- diet_01[titi,] ## select the diet row
  toto <- toto * matrix(rep(diet_01.but,each=nrow(toto)),nrow(toto),ncol(toto)) ##multiply the data by the diet (the diet row is replicated over multiple rows to match the dimension)
  
  sites_cooc_10[tata,3:ncol(sites_cooc_10)] <- toto ##put the correct data in the matrix
}

which(sites_cooc_10.save==0 & sites_cooc_10==1, arr.ind=TRUE) ##should be empty (just a check)

sites_cooc_10.all <- sites_cooc_10
for(i in sort(unique(sites_cooc_10$butterfly))){
  toto <- as.matrix(sites_cooc_10[which(sites_cooc_10$butterfly==i),3:ncol(sites_cooc_10)])
  tata <- unlist(diet_01[which(row.names(diet_01)==i),])
  tata <- (matrix(rep(tata,each=nrow(toto)),nrow(toto),length(tata)))
  sites_cooc_10[which(sites_cooc_10$butterfly==i),3:ncol(sites_cooc_10)] <- toto*tata
  #sites_cooc_10[which(sites_cooc_10$butterfly==i),3:ncol(sites_cooc_10)] <- sites_cooc_10[which(sites_cooc_10$butterfly==i),3:ncol(sites_cooc_10)]*diet_01[which(row.names(diet_01)==sites_cooc_10$butterfly[i]),]
}

diet_01_weight <- rowSums(diet_01) #number of plants per butterfly
#diet_01_weight[which(diet_01_weight==0)] <- 1 ##jsut a quick fix to avoid division by 0 (due to some error in diet_01)
diet_01_weight <- diet_01_weight[order(names(diet_01_weight))] #sort alphabetically

sites_cooc_10_ok <- data.frame(cell_ID=sort(unique(sites_cooc_10$cell_ID)),richness=0)
for(j in sort(unique(sites_cooc_10$butterfly))){
  toto <- sites_cooc_10[which(sites_cooc_10$butterfly==j),] #select butterfly "j"
  toto <- toto[order(toto$cell_ID),] #sort cells
  
  tata <- data.frame(matrix(0,nrow(sites_cooc_10_ok),ncol(sites_cooc_10)-2))
  ii <- 0
  for(k in which(sites_cooc_10_ok$cell_ID %in% toto$cell_ID)){
    ii <- ii+1
    tata[k,] <- toto[ii,3:ncol(toto)]
  }
  tutu <- rowSums(tata)/diet_01_weight[which(names(diet_01_weight)==j)] ##attention genus vs species
  
  sites_cooc_10_ok$richness <- sites_cooc_10_ok$richness+tutu
}

toto <- data.frame(x=cells_10$x,y=cells_10$y,richness=NA)
for(i in 1:nrow(sites_cooc_10_ok)){
  toto$richness[which(cells_10$cell_ID==sites_cooc_10_ok$cell_ID[i])] <- sites_cooc_10_ok$richness[i]
}





#EXTRACT AVERAGE ANNUAL MINIMUM, MAXIMUM, TOTAL Prec AND ASSIGN DATA TO SITES (3 resolutions) - applies for past and future data
# average wettest month per year per site - 2.5min
# group my columns per year
group_indices <- seq(3, ncol(prec_spatial_df), by = 12)

# Initialize a matrix to store the highest values for each group
all_row_data <- as.matrix(prec_spatial_df)
highest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))

# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the highest value in each group of 12 columns for all rows
  max_values <- apply(all_row_data[, start_col:end_col], 1, max)
  
  # Store the highest values in the matrix
  highest_values_matrix[, i] <- max_values
}

# make dataframe 
highest_values_df <- as.data.frame(highest_values_matrix)

# Calculate the average wettest month for each row
highest_values_df$average_wettest_month <- rowMeans(highest_values_df, na.rm = TRUE)

# make dataframe with average wettest month and coordinates
avg_max_prec_2_5_df <- data.frame(x = prec_spatial_df$x, y = prec_spatial_df$y,
                              average_wettest_month = highest_values_df$average_wettest_month,
                              ID = NA)

# average driest month per year per site - 2.5min
# group my columns per year
group_indices <- seq(3, ncol(prec_spatial_df), by = 12)

# Initialize a matrix to store the lowest values for each group
all_row_data <- as.matrix(prec_spatial_df)
lowest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))

# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the lowest value in each group of 12 columns for all rows
  min_values <- apply(all_row_data[, start_col:end_col], 1, min)
  
  # Store the lowest values in the matrix
  lowest_values_matrix[, i] <- min_values
}

# make dataframe 
lowest_values_df <- as.data.frame(lowest_values_matrix)

# Calculate the average driest month for each row
lowest_values_df$average_driest_month <- rowMeans(lowest_values_df, na.rm = TRUE)

# make dataframe with average driest month and coordinates
avg_min_prec_2_5_df <- data.frame(x = prec_spatial_df$x, y = prec_spatial_df$y,
                              average_driest_month = lowest_values_df$average_driest_month,
                              ID = NA)

# total precipitation per year per site - 2.5min
# group my columns per year
group_indices <- seq(3, ncol(prec_spatial_df), by = 12)

# Initialize a matrix to store the sum for each group (annual total precipitation)
all_row_data <- as.matrix(prec_spatial_df)
annual_total_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))

# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the value for each group of 12 columns for all rows
  tot_values <- apply(all_row_data[, start_col:end_col], 1, sum)
  
  # Store the lowest values in the matrix
  annual_total_matrix[, i] <- tot_values
}

# make dataframe 
annual_total_df <- as.data.frame(annual_total_matrix)

# Calculate the average annual total precipitation for each row
annual_total_df$average_annual_total_prec <- rowMeans(annual_total_df, na.rm = TRUE)

# make dataframe with average annual total precipitation and coordinates
avg_annual_total_2_5_df <- data.frame(x = prec_spatial_df$x, y = prec_spatial_df$y,
                                  average_annual_total_prec = annual_total_df$average_annual_total_prec,
                              ID = NA)
# prec site allocation
setDT(avg_max_prec_2_5_df)
setDT(avg_min_prec_2_5_df)
setDT(avg_annual_total_2_5_df)
setDT(cells_2_5)

# Create prec_sites and assigning each observation to one cell
prec_wet_sites_2_5 <- cells_2_5[avg_max_prec_2_5_df, on = .(lat_min <= y, lat_max >= y,
                                                lon_min <= x, lon_max >= x),
                        .(average_wettest_month = i.average_wettest_month,
                          y, x, cell_ID = x.cell_ID), mult = "first"] 

prec_dry_sites_2_5 <- cells_2_5[avg_min_prec_2_5_df, on = .(lat_min <= y, lat_max >= y,
                                                    lon_min <= x, lon_max >= x),
                            .(average_driest_month = i.average_driest_month,
                              y, x, cell_ID = x.cell_ID), mult = "first"] 

prec_total_sites_2_5 <- cells_2_5[avg_annual_total_2_5_df, on = .(lat_min <= y, lat_max >= y,
                                                    lon_min <= x, lon_max >= x),
                            .(average_annual_total_prec = i.average_annual_total_prec,
                              y, x, cell_ID = x.cell_ID), mult = "first"] 
  
# average wettest month per year per site - 5min
# group my columns per year
group_indices <- seq(3, ncol(prec_5min_spatial_df), by = 12)

# Initialize a matrix to store the highest values for each group
all_row_data <- as.matrix(prec_5min_spatial_df)
highest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))

# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the highest value in each group of 12 columns for all rows
  max_values <- apply(all_row_data[, start_col:end_col], 1, max)
  
  # Store the highest values in the matrix
  highest_values_matrix[, i] <- max_values
}

# make dataframe 
highest_values_df <- as.data.frame(highest_values_matrix)

# Calculate the average wettest month for each row
highest_values_df$average_wettest_month <- rowMeans(highest_values_df, na.rm = TRUE)

# make dataframe with average wettest month and coordinates
avg_max_prec_5_df <- data.frame(x = prec_5min_spatial_df$x, y = prec_5min_spatial_df$y,
                              average_wettest_month = highest_values_df$average_wettest_month,
                              ID = NA)

# average driest month per year per site - 5min
# group my columns per year
group_indices <- seq(3, ncol(prec_5min_spatial_df), by = 12)

# Initialize a matrix to store the lowest values for each group
all_row_data <- as.matrix(prec_5min_spatial_df)
lowest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))

# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the lowest value in each group of 12 columns for all rows
  min_values <- apply(all_row_data[, start_col:end_col], 1, min)
  
  # Store the lowest values in the matrix
  lowest_values_matrix[, i] <- min_values
}

# make dataframe 
lowest_values_df <- as.data.frame(lowest_values_matrix)

# Calculate the average driest month for each row
lowest_values_df$average_driest_month <- rowMeans(lowest_values_df, na.rm = TRUE)

# make dataframe with average driest month and coordinates
avg_min_prec_5_df <- data.frame(x = prec_5min_spatial_df$x, y = prec_5min_spatial_df$y,
                              average_driest_month = lowest_values_df$average_driest_month,
                              ID = NA)

# total precipitation per year per site - 5min
# group my columns per year
group_indices <- seq(3, ncol(prec_5min_spatial_df), by = 12)

# Initialize a matrix to store the sum for each group (annual total precipitation)
all_row_data <- as.matrix(prec_5min_spatial_df)
annual_total_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))

# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the total value for each group of 12 columns for all rows
  tot_values <- apply(all_row_data[, start_col:end_col], 1, sum)
  
  # Store the sum in the matrix
  annual_total_matrix[, i] <- tot_values
}

# make dataframe 
annual_total_df <- as.data.frame(annual_total_matrix)

# Calculate the average annual total precipitation for each row
annual_total_df$average_annual_total_prec <- rowMeans(annual_total_df, na.rm = TRUE)

# make dataframe with average wettest month and coordinates
avg_annual_total_5_df <- data.frame(x = prec_5min_spatial_df$x, y = prec_5min_spatial_df$y,
                                  average_annual_total_prec = annual_total_df$average_annual_total_prec,
                                  ID = NA)
# prec site allocation
setDT(avg_max_prec_5_df)
setDT(avg_min_prec_5_df)
setDT(avg_annual_total_5_df)
setDT(cells_5)

# Create prec_sites and assigning each observation to one cell
prec_wet_sites_5 <- cells_5[avg_max_prec_5_df, on = .(lat_min <= y, lat_max >= y,
                                                        lon_min <= x, lon_max >= x),
                                .(average_wettest_month = i.average_wettest_month,
                                  y, x, cell_ID = x.cell_ID), mult = "first"] 

prec_dry_sites_5 <- cells_5[avg_min_prec_5_df, on = .(lat_min <= y, lat_max >= y,
                                                        lon_min <= x, lon_max >= x),
                                .(average_driest_month = i.average_driest_month,
                                  y, x, cell_ID = x.cell_ID), mult = "first"] 

prec_total_sites_5 <- cells_5[avg_annual_total_5_df, on = .(lat_min <= y, lat_max >= y,
                                                              lon_min <= x, lon_max >= x),
                                  .(average_annual_total_prec = i.average_annual_total_prec,
                                    y, x, cell_ID = x.cell_ID), mult = "first"] 

# average wettest month per year per site - 10min
# group my columns per year
group_indices <- seq(3, ncol(prec_10min_spatial_df), by = 12)

# Initialize a matrix to store the highest values for each group
all_row_data <- as.matrix(prec_10min_spatial_df)
highest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))

# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the highest value in each group of 12 columns for all rows
  max_values <- apply(all_row_data[, start_col:end_col], 1, max)
  
  # Store the highest values in the matrix
  highest_values_matrix[, i] <- max_values
}

# make dataframe 
highest_values_df <- as.data.frame(highest_values_matrix)

# Calculate the average wettest month for each row
highest_values_df$average_wettest_month <- rowMeans(highest_values_df, na.rm = TRUE)

# make dataframe with average wettest month and coordinates
avg_max_prec_10_df <- data.frame(x = prec_10min_spatial_df$x, y = prec_10min_spatial_df$y,
                                average_wettest_month = highest_values_df$average_wettest_month,
                                ID = NA)

# average driest month per year per site - 10min
# group my columns per year
group_indices <- seq(3, ncol(prec_10min_spatial_df), by = 12)

# Initialize a matrix to store the lowest values for each group
all_row_data <- as.matrix(prec_10min_spatial_df)
lowest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))

# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the lowest value in each group of 12 columns for all rows
  min_values <- apply(all_row_data[, start_col:end_col], 1, min)
  
  # Store the lowest values in the matrix
  lowest_values_matrix[, i] <- min_values
}

# make dataframe 
lowest_values_df <- as.data.frame(lowest_values_matrix)

# Calculate the average driest month for each row
lowest_values_df$average_driest_month <- rowMeans(lowest_values_df, na.rm = TRUE)

# make dataframe with average driest month and coordinates
avg_min_prec_10_df <- data.frame(x = prec_10min_spatial_df$x, y = prec_10min_spatial_df$y,
                                average_driest_month = lowest_values_df$average_driest_month,
                                ID = NA)

# total precipitation per year per site - 10min
# group my columns per year
group_indices <- seq(3, ncol(prec_10min_spatial_df), by = 12)

# Initialize a matrix to store the sum for each group (annual total precipitation)
all_row_data <- as.matrix(prec_10min_spatial_df)
annual_total_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))

# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the total value for each group of 12 columns for all rows
  annual_total <- apply(all_row_data[, start_col:end_col], 1, sum)
  
  # Store the sum in the matrix
  annual_total_matrix[, i] <- annual_total
}

# make dataframe 
annual_total_df <- as.data.frame(annual_total_matrix)

# Calculate the average annual total precipitation for each row
annual_total_df$average_annual_total_prec <- rowMeans(annual_total_df, na.rm = TRUE)

# make dataframe with average wettest month and coordinates
avg_annual_total_10_df <- data.frame(x = prec_10min_spatial_df$x, y = prec_10min_spatial_df$y,
                                    average_annual_total_prec = annual_total_df$average_annual_total_prec,
                                    ID = NA)
# prec site allocation
setDT(avg_max_prec_10_df)
setDT(avg_min_prec_10_df)
setDT(avg_annual_total_10_df)
setDT(cells_10)

# Create prec_sites and assigning each observation to one cell
prec_wet_sites_10 <- cells_10[avg_max_prec_10_df, on = .(lat_min <= y, lat_max >= y,
                                                      lon_min <= x, lon_max >= x),
                            .(average_wettest_month = i.average_wettest_month,
                              y, x, cell_ID = x.cell_ID), mult = "first"] 

prec_dry_sites_10 <- cells_10[avg_min_prec_10_df, on = .(lat_min <= y, lat_max >= y,
                                                      lon_min <= x, lon_max >= x),
                            .(average_driest_month = i.average_driest_month,
                              y, x, cell_ID = x.cell_ID), mult = "first"] 

prec_total_sites_10 <- cells_10[avg_annual_total_10_df, on = .(lat_min <= y, lat_max >= y,
                                                            lon_min <= x, lon_max >= x),
                              .(average_annual_total_prec = i.average_annual_total_prec,
                                y, x, cell_ID = x.cell_ID), mult = "first"] 


#EXTRACT AVERAGE ANNUAL MINIMUM, MAXIMUM, MEAN Temp AND ASSIGN DATA TO SITES (3 resolutions) - applies for past and future data
# average temp of coldest month per year per site - 2.5min
# group my columns per year
group_indices <- seq(3, ncol(tmin_spatial_2_5_df), by = 12)

# Initialize a matrix to store the lowest values for each group
all_row_data <- as.matrix(tmin_spatial_2_5_df)
lowest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))


# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the highest value in each group of 12 columns for all rows
  min_values <- apply(all_row_data[, start_col:end_col], 1, min)
  
  # Store the highest values in the matrix
  lowest_values_matrix[, i] <- min_values
}

# make dataframe 
lowest_values_df <- as.data.frame(lowest_values_matrix)

# Calculate the average coldest month for each row
lowest_values_df$average_coldest_month <- rowMeans(lowest_values_df, na.rm = TRUE)

# make dataframe with average coldest month and coordinates
avg_tmin_df <- data.frame(x = tmin_spatial_2_5_df$x, y = tmin_spatial_2_5_df$y, 
                          average_coldest_month = lowest_values_df$average_coldest_month)

# tmin site allocation
setDT(avg_tmin_df)
setDT(cells_2_5)

# Create tmin_sites trying to get rid of duplicates
tmin_sites_2_5 <- cells_2_5[avg_tmin_df, on = .(lat_min <= y, lat_max >= y,
                                        lon_min <= x, lon_max >= x),
                    .(average_coldest_month = i.average_coldest_month, y, x, cell_ID = x.cell_ID), mult = "first"]

# average temp of coldest month per year per site - 5min
# group my columns per year
group_indices <- seq(3, ncol(tmin_5min_spatial_df), by = 12)

# Initialize a matrix to store the lowest values for each group
all_row_data <- as.matrix(tmin_5min_spatial_df)
lowest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))


# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the highest value in each group of 12 columns for all rows
  min_values <- apply(all_row_data[, start_col:end_col], 1, min)
  
  # Store the highest values in the matrix
  lowest_values_matrix[, i] <- min_values
}

# make dataframe 
lowest_values_df <- as.data.frame(lowest_values_matrix)

# Calculate the average coldest month for each row
lowest_values_df$average_coldest_month <- rowMeans(lowest_values_df, na.rm = TRUE)

# make dataframe with average coldest month and coordinates
avg_tmin_df <- data.frame(x = tmin_5min_spatial_df$x, y = tmin_5min_spatial_df$y, 
                          average_coldest_month = lowest_values_df$average_coldest_month)

# tmin site allocation
setDT(avg_tmin_df)
setDT(cells_5)

# Create tmin_sites trying to get rid of duplicates
tmin_sites_5 <- cells_5[avg_tmin_df, on = .(lat_min <= y, lat_max >= y,
                                                lon_min <= x, lon_max >= x),
                            .(average_coldest_month = i.average_coldest_month, y, x, cell_ID = x.cell_ID), mult = "first"]

# average temp of coldest month per year per site - 10min
# group my columns per year
group_indices <- seq(3, ncol(tmin_10min_spatial_df), by = 12)

# Initialize a matrix to store the lowest values for each group
all_row_data <- as.matrix(tmin_10min_spatial_df)
lowest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))


# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the highest value in each group of 12 columns for all rows
  min_values <- apply(all_row_data[, start_col:end_col], 1, min)
  
  # Store the highest values in the matrix
  lowest_values_matrix[, i] <- min_values
}

# make dataframe 
lowest_values_df <- as.data.frame(lowest_values_matrix)

# Calculate the average coldest month for each row
lowest_values_df$average_coldest_month <- rowMeans(lowest_values_df, na.rm = TRUE)

# make dataframe with average coldest month and coordinates
avg_tmin_df <- data.frame(x = tmin_10min_spatial_df$x, y = tmin_10min_spatial_df$y, 
                          average_coldest_month = lowest_values_df$average_coldest_month)

# tmin site allocation
setDT(avg_tmin_df)
setDT(cells_10)

# Create tmin_sites trying to get rid of duplicates
tmin_sites_10 <- cells_10[avg_tmin_df, on = .(lat_min <= y, lat_max >= y,
                                            lon_min <= x, lon_max >= x),
                        .(average_coldest_month = i.average_coldest_month, y, x, cell_ID = x.cell_ID), mult = "first"]

# average temp of hottest month per year per site - 2.5 min
# group my columns per year
group_indices <- seq(3, ncol(tmax_spatial_2_5_df), by = 12)

# Initialize a matrix to store the highest values for each group
all_row_data <- as.matrix(tmax_spatial_2_5_df)
highest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))


# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the highest value in each group of 12 columns for all rows
  max_values <- apply(all_row_data[, start_col:end_col], 1, max)
  
  # Store the highest values in the matrix
  highest_values_matrix[, i] <- max_values
}

# make dataframe 
highest_values_df <- as.data.frame(highest_values_matrix)

# Calculate the average hottest month for each row
highest_values_df$average_hottest_month <- rowMeans(highest_values_df, na.rm = TRUE)

# make dataframe with average hottest month and coordinates
avg_tmax_df <- data.frame(x = tmax_spatial_2_5_df$x, y = tmax_spatial_2_5_df$y, average_hottest_month = highest_values_df$average_hottest_month)

# tmax site allocation
setDT(avg_tmax_df)
setDT(cells_2_5)

# Create tmax_sites trying to get rid of duplicates
tmax_sites_2_5 <- cells_2_5[avg_tmax_df, on = .(lat_min <= y, lat_max >= y,
                                            lon_min <= x, lon_max >= x),
                    .(average_hottest_month = i.average_hottest_month, y, x, cell_ID = x.cell_ID), mult = "first"]

# average temp of hottest month per year per site - 5 min
# group my columns per year
group_indices <- seq(3, ncol(tmax_5min_spatial_df), by = 12)

# Initialize a matrix to store the highest values for each group
all_row_data <- as.matrix(tmax_5min_spatial_df)
highest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))


# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the highest value in each group of 12 columns for all rows
  max_values <- apply(all_row_data[, start_col:end_col], 1, max)
  
  # Store the highest values in the matrix
  highest_values_matrix[, i] <- max_values
}

# make dataframe 
highest_values_df <- as.data.frame(highest_values_matrix)

# Calculate the average hottest month for each row
highest_values_df$average_hottest_month <- rowMeans(highest_values_df, na.rm = TRUE)

# make dataframe with average hottest month and coordinates
avg_tmax_df <- data.frame(x = tmax_5min_spatial_df$x, y = tmax_5min_spatial_df$y, average_hottest_month = highest_values_df$average_hottest_month)

# tmax site allocation
setDT(avg_tmax_df)
setDT(cells_5)

# Create tmax_sites trying to get rid of duplicates
tmax_sites_5 <- cells_5[avg_tmax_df, on = .(lat_min <= y, lat_max >= y,
                                            lon_min <= x, lon_max >= x),
                        .(average_hottest_month = i.average_hottest_month, y, x, cell_ID = x.cell_ID), mult = "first"]

# average temp of hottest month per year per site - 10 min
# group my columns per year
group_indices <- seq(3, ncol(tmax_10min_spatial_df), by = 12)

# Initialize a matrix to store the highest values for each group
all_row_data <- as.matrix(tmax_10min_spatial_df)
highest_values_matrix <- matrix(NA, nrow = nrow(all_row_data), ncol = length(group_indices))


# Loop through each group of columns
for (i in seq_along(group_indices)) {
  start_col <- group_indices[i]
  end_col <- min(start_col + 11, ncol(all_row_data))
  
  # Find the highest value in each group of 12 columns for all rows
  max_values <- apply(all_row_data[, start_col:end_col], 1, max)
  
  # Store the highest values in the matrix
  highest_values_matrix[, i] <- max_values
}

# make dataframe 
highest_values_df <- as.data.frame(highest_values_matrix)

# Calculate the average hottest month for each row
highest_values_df$average_hottest_month <- rowMeans(highest_values_df, na.rm = TRUE)

# make dataframe with average hottest month and coordinates
avg_tmax_df <- data.frame(x = tmax_10min_spatial_df$x, y = tmax_10min_spatial_df$y, average_hottest_month = highest_values_df$average_hottest_month)

# tmax site allocation
setDT(avg_tmax_df)
setDT(cells_10)

# Create tmax_sites trying to get rid of duplicates
tmax_sites_10 <- cells_10[avg_tmax_df, on = .(lat_min <= y, lat_max >= y,
                                            lon_min <= x, lon_max >= x),
                        .(average_hottest_month = i.average_hottest_month, y, x, cell_ID = x.cell_ID), mult = "first"]
# average temp per year per site - 2.5min
## Rename the columns in tmin_spatial_2_5_df
tmin_spatial_2_5_df_renamed <- tmin_spatial_2_5_df %>%
  rename_at(vars(-c(1, 2)), ~paste0("tmin_", .))

## Rename the columns in tmax_spatial_2_5_df
tmax_spatial_2_5_df_renamed <- tmax_spatial_2_5_df %>%
  rename_at(vars(-c(1, 2)), ~paste0("tmax_", .))

## Combine the dataframes
combined_df <- cbind(tmin_spatial_2_5_df_renamed, tmax_spatial_2_5_df_renamed[, -c(1, 2)])

## Calculate the average of the minimum and maximum temperatures for each site
avg_sites_2_5 <- combined_df %>%
  mutate(avg_temp = apply(combined_df[, -c(1, 2)], 1, mean)) %>%
  select(x, y, avg_temp)

# 2.5min avg_temp site allocation
setDT(avg_sites_2_5)
setDT(cells_2_5)

# Create avg_sites_2_5 trying to get rid of duplicates
avg_sites_2_5 <- cells_2_5[avg_sites_2_5, on = .(lat_min <= y, lat_max >= y,
                                                lon_min <= x, lon_max >= x),
                            .(avg_temp = i.avg_temp, y, x, cell_ID = x.cell_ID), mult = "first"]


# average temp per year per site - 5min
## Rename the columns in tmin_5min_spatial_df
tmin_spatial_5_df_renamed <- tmin_5min_spatial_df %>%
  rename_at(vars(-c(1, 2)), ~paste0("tmin_", .))

## Rename the columns in tmax_5min_spatial_df
tmax_spatial_5_df_renamed <- tmax_5min_spatial_df %>%
  rename_at(vars(-c(1, 2)), ~paste0("tmax_", .))

## Combine the dataframes
combined_df <- cbind(tmin_spatial_5_df_renamed, tmax_spatial_5_df_renamed[, -c(1, 2)])

## Calculate the average of the minimum and maximum temperatures for each site
avg_sites_5 <- combined_df %>%
  mutate(avg_temp = apply(combined_df[, -c(1, 2)], 1, mean)) %>%
  select(x, y, avg_temp)

# 5min avg_temp site allocation
setDT(avg_sites_5)
setDT(cells_5)

# Create avg_sites_2_5 trying to get rid of duplicates
avg_sites_5 <- cells_5[avg_sites_5, on = .(lat_min <= y, lat_max >= y,
                                                 lon_min <= x, lon_max >= x),
                           .(avg_temp = i.avg_temp, y, x, cell_ID = x.cell_ID), mult = "first"]



# average temp per year per site - 10min
## Rename the columns in tmin_10min_spatial_df
tmin_spatial_10_df_renamed <- tmin_10min_spatial_df %>%
  rename_at(vars(-c(1, 2)), ~paste0("tmin_", .))

## Rename the columns in tmax_10min_spatial_df
tmax_spatial_10_df_renamed <- tmax_10min_spatial_df %>%
  rename_at(vars(-c(1, 2)), ~paste0("tmax_", .))

## Combine the dataframes
combined_df <- cbind(tmin_spatial_10_df_renamed, tmax_spatial_10_df_renamed[, -c(1, 2)])

## Calculate the average of the minimum and maximum temperatures for each site
avg_sites_10 <- combined_df %>%
  mutate(avg_temp = apply(combined_df[, -c(1, 2)], 1, mean)) %>%
  select(x, y, avg_temp)

# 10min avg_temp site allocation
setDT(avg_sites_10)
setDT(cells_10)

# Create avg_sites_10 trying to get rid of duplicates
avg_sites_10 <- cells_10[avg_sites_10, on = .(lat_min <= y, lat_max >= y,
                                           lon_min <= x, lon_max >= x),
                       .(avg_temp = i.avg_temp, y, x, cell_ID = x.cell_ID), mult = "first"]


